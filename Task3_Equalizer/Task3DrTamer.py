# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task3DrTamer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import simpleaudio as sa
import logging
import warnings
warnings.filterwarnings("ignore")
logging.basicConfig(filename=" Musical Instruments Emphasizer Logger.log", level=logging.DEBUG,
                    format='%(asctime)s:%(funcName)s:%(message)s')
logging.getLogger('matplotlib.font_manager').disabled = True
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtCore, QtGui, QtWidgets
from scipy.io import wavfile
import sounddevice as sd
from pyqtgraph import PlotWidget
import matplotlib.pyplot as plt

#plt.style.use('dark_background')
class MatplotlibCanvas(FigureCanvas):
    def __init__(self, parent=None, dpi=100):
        fig = Figure(dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MatplotlibCanvas, self).__init__(fig)
        #fig.tight_layout()

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(943, 607)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_tabs = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_tabs.setObjectName("gridLayout_tabs")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.tabWidget.setObjectName("tabWidget")
        self.EQ = QtWidgets.QWidget()
        self.EQ.setObjectName("EQ")
        self.gridLayout_tab1 = QtWidgets.QGridLayout(self.EQ)
        self.gridLayout_tab1.setObjectName("gridLayout_tab1")
        self.line = QtWidgets.QFrame(self.EQ)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_tab1.addWidget(self.line, 1, 1, 1, 1)
        self.gridLayout_maingraph = QtWidgets.QGridLayout()
        self.gridLayout_maingraph.setObjectName("gridLayout_maingraph")
        self.label = QtWidgets.QLabel(self.EQ)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(78, 117, 117);")
        self.label.setObjectName("label")
        self.gridLayout_maingraph.addWidget(self.label, 1, 3, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_maingraph.addItem(spacerItem, 1, 4, 1, 1)
        self.gridLayout_sliders = QtWidgets.QGridLayout()
        self.gridLayout_sliders.setObjectName("gridLayout_sliders")
        self.ViolinSlider = QtWidgets.QSlider(self.EQ)
        self.ViolinSlider.setOrientation(QtCore.Qt.Vertical)
        self.ViolinSlider.setObjectName("ViolinSlider")
        self.gridLayout_sliders.addWidget(self.ViolinSlider, 0, 6, 1, 1)
        self.FluteSlider = QtWidgets.QSlider(self.EQ)
        self.FluteSlider.setOrientation(QtCore.Qt.Vertical)
        self.FluteSlider.setObjectName("FluteSlider")
        self.gridLayout_sliders.addWidget(self.FluteSlider, 0, 5, 1, 1)
        self.XylophoneSlider = QtWidgets.QSlider(self.EQ)
        self.XylophoneSlider.setOrientation(QtCore.Qt.Vertical)
        self.XylophoneSlider.setObjectName("XylophoneSlider")
        self.gridLayout_sliders.addWidget(self.XylophoneSlider, 0, 0, 1, 1)
        self.DrumsSlider = QtWidgets.QSlider(self.EQ)
        self.DrumsSlider.setOrientation(QtCore.Qt.Vertical)
        self.DrumsSlider.setObjectName("DrumsSlider")
        self.gridLayout_sliders.addWidget(self.DrumsSlider, 0, 7, 1, 1)

        self.label_xlephonedp = QtWidgets.QLabel(self.EQ)
        self.label_xlephonedp.setText("1 DP")
        self.label_xlephonedp.setObjectName("label_xlephone")
        self.gridLayout_sliders.addWidget(self.label_xlephonedp, 1, 0, 1, 1)

        self.label_xlephone = QtWidgets.QLabel(self.EQ)
        self.label_xlephone.setText("")
        self.label_xlephone.setPixmap(QtGui.QPixmap("xlephone.png"))
        self.label_xlephone.setObjectName("label_xlephone")
        self.gridLayout_sliders.addWidget(self.label_xlephone, 2, 0, 1, 1)
        self.label_flute = QtWidgets.QLabel(self.EQ)
        self.label_flute.setText("")
        self.label_flute.setPixmap(QtGui.QPixmap("flute (1).png"))
        self.label_flute.setObjectName("label_flute")
        self.gridLayout_sliders.addWidget(self.label_flute, 2, 5, 1, 1)
        self.label_flutedp = QtWidgets.QLabel(self.EQ)
        self.label_flutedp.setText("1 DP")
        self.label_flutedp.setObjectName("label_flute")
        self.gridLayout_sliders.addWidget(self.label_flutedp, 1, 5, 1, 1)
        self.PianoSlider = QtWidgets.QSlider(self.EQ)
        self.PianoSlider.setOrientation(QtCore.Qt.Vertical)
        self.PianoSlider.setObjectName("PianoSlider")
        self.gridLayout_sliders.addWidget(self.PianoSlider, 0, 2, 1, 1)
        self.labeldrumdp = QtWidgets.QLabel(self.EQ)
        self.labeldrumdp.setText("1 DP")
        self.labeldrumdp.setObjectName("labeldrumdp")
        self.gridLayout_sliders.addWidget(self.labeldrumdp, 1, 7, 1, 1)
        self.labeldrum = QtWidgets.QLabel(self.EQ)
        self.labeldrum.setText("")
        self.labeldrum.setPixmap(QtGui.QPixmap("drumicon1.png"))
        self.labeldrum.setObjectName("labeldrum")
        self.gridLayout_sliders.addWidget(self.labeldrum, 2, 7, 1, 1)
        self.label_violin = QtWidgets.QLabel(self.EQ)
        self.label_violin.setText("")
        self.label_violin.setPixmap(QtGui.QPixmap("violin.png"))
        self.label_violin.setObjectName("label_violin")
        self.gridLayout_sliders.addWidget(self.label_violin, 2, 6, 1, 1)
        self.label_violindp = QtWidgets.QLabel(self.EQ)
        self.label_violindp.setText("1 DP")
        self.label_violindp.setObjectName("label_violin")
        self.gridLayout_sliders.addWidget(self.label_violindp, 1, 6, 1, 1)
        self.label_piano = QtWidgets.QLabel(self.EQ)
        self.label_piano.setText("")
        self.label_piano.setPixmap(QtGui.QPixmap("pianophoto.png"))
        self.label_piano.setObjectName("label_piano")
        self.gridLayout_sliders.addWidget(self.label_piano, 2, 2, 1, 1)
        self.label_pianodp = QtWidgets.QLabel(self.EQ)
        self.label_pianodp.setText("1 DP")
        self.label_pianodp.setObjectName("label_piano")
        self.gridLayout_sliders.addWidget(self.label_pianodp, 1, 2, 1, 1)
        self.gridLayout_maingraph.addLayout(self.gridLayout_sliders, 4, 0, 1, 6)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_maingraph.addItem(spacerItem1, 1, 1, 1, 1)
        self.Volume_slider = QtWidgets.QSlider(self.EQ)
        self.Volume_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Volume_slider.setObjectName("Volume_slider")
        self.gridLayout_maingraph.addWidget(self.Volume_slider, 2, 1, 1, 5)
        self.Open_Button = QtWidgets.QPushButton(self.EQ)
        self.Open_Button.setObjectName("Open_Button")
        self.gridLayout_maingraph.addWidget(self.Open_Button, 1, 5, 1, 1)
        self.labelvolume = QtWidgets.QLabel(self.EQ)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.labelvolume.setFont(font)
        self.labelvolume.setObjectName("labelvolume")
        self.gridLayout_maingraph.addWidget(self.labelvolume, 2, 0, 1, 1)
        self.graphicsView_maingraph = PlotWidget(self.EQ)
        self.graphicsView_maingraph.setObjectName("graphicsView_maingraph")
        self.graphicsView_maingraph.plotItem.showGrid(x=True, y=True)
        self.gridLayout_maingraph.addWidget(self.graphicsView_maingraph, 3, 0, 1, 6)
        self.play_Button = QtWidgets.QPushButton(self.EQ)
        self.play_Button.setObjectName("play_Button")


        self.gridLayout_maingraph.addWidget(self.play_Button, 1, 0, 1, 1)
        self.gridLayout_tab1.addLayout(self.gridLayout_maingraph, 1, 0, 1, 1)
        self.gridLayout_spectro = QtWidgets.QGridLayout()
        self.gridLayout_spectro.setObjectName("gridLayout_spectro")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_spectro.addItem(spacerItem2, 1, 2, 1, 1)
        self.label_spectro = QtWidgets.QLabel(self.EQ)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_spectro.setFont(font)
        self.label_spectro.setStyleSheet("color: rgb(78, 117, 117);")
        self.label_spectro.setObjectName("label_2")
        self.gridLayout_spectro.addWidget(self.label_spectro, 0, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_spectro.addItem(spacerItem3, 0, 0, 1, 1)
        self.spectro_fig = Figure()
        self.figure_canvas_genSig = FigureCanvas(self.spectro_fig)
        self.gridLayout_spectro.addWidget(self.figure_canvas_genSig,3, 0, 1, 3)


        self.gridLayout_tab1.addLayout(self.gridLayout_spectro, 1, 2, 1, 1)
        self.tabWidget.addTab(self.EQ, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.c5_button = QtWidgets.QPushButton(self.tab_2)
        self.c5_button.setGeometry(QtCore.QRect(980, 90, 51, 241))
        self.c5_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.c5_button.setText("")
        self.c5_button.setObjectName("c5_button")
        self.c3_button = QtWidgets.QPushButton(self.tab_2)
        self.c3_button.setGeometry(QtCore.QRect(280, 90, 51, 241))
        self.c3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.c3_button.setText("")
        self.c3_button.setObjectName("c3_button")
        self.d3_button = QtWidgets.QPushButton(self.tab_2)
        self.d3_button.setGeometry(QtCore.QRect(330, 90, 51, 241))
        self.d3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.d3_button.setText("")
        self.d3_button.setObjectName("d3_button")
        self.e3_button = QtWidgets.QPushButton(self.tab_2)
        self.e3_button.setGeometry(QtCore.QRect(380, 90, 51, 241))
        self.e3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.e3_button.setText("")
        self.e3_button.setObjectName("e3_button")
        self.f3_button = QtWidgets.QPushButton(self.tab_2)
        self.f3_button.setGeometry(QtCore.QRect(430, 90, 51, 241))
        self.f3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.f3_button.setText("")
        self.f3_button.setObjectName("f3_button")
        self.g3_button = QtWidgets.QPushButton(self.tab_2)
        self.g3_button.setGeometry(QtCore.QRect(480, 90, 51, 241))
        self.g3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.g3_button.setText("")
        self.g3_button.setObjectName("g3_button")
        self.a3_button = QtWidgets.QPushButton(self.tab_2)
        self.a3_button.setGeometry(QtCore.QRect(530, 90, 51, 241))
        self.a3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.a3_button.setText("")
        self.a3_button.setObjectName("a3_button")
        self.b3_button = QtWidgets.QPushButton(self.tab_2)
        self.b3_button.setGeometry(QtCore.QRect(580, 90, 51, 241))
        self.b3_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.b3_button.setText("")
        self.b3_button.setObjectName("b3_button")
        self.c4_button = QtWidgets.QPushButton(self.tab_2)
        self.c4_button.setGeometry(QtCore.QRect(630, 90, 51, 241))
        self.c4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.c4_button.setText("")
        self.c4_button.setObjectName("c4_button")
        self.d4_button = QtWidgets.QPushButton(self.tab_2)
        self.d4_button.setGeometry(QtCore.QRect(680, 90, 51, 241))
        self.d4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.d4_button.setText("")
        self.d4_button.setObjectName("d4_button")
        self.f4_button = QtWidgets.QPushButton(self.tab_2)
        self.f4_button.setGeometry(QtCore.QRect(780, 90, 51, 241))
        self.f4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.f4_button.setText("")
        self.f4_button.setObjectName("f4_button")
        self.e4_button = QtWidgets.QPushButton(self.tab_2)
        self.e4_button.setGeometry(QtCore.QRect(730, 90, 51, 241))
        self.e4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.e4_button.setText("")
        self.e4_button.setObjectName("e4_button")
        self.g4_button = QtWidgets.QPushButton(self.tab_2)
        self.g4_button.setGeometry(QtCore.QRect(830, 90, 51, 241))
        self.g4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.g4_button.setText("")
        self.g4_button.setObjectName("g4_button")
        self.a4_button = QtWidgets.QPushButton(self.tab_2)
        self.a4_button.setGeometry(QtCore.QRect(880, 90, 51, 241))
        self.a4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.a4_button.setText("")
        self.a4_button.setObjectName("a4_button")
        self.b4_button = QtWidgets.QPushButton(self.tab_2)
        self.b4_button.setGeometry(QtCore.QRect(930, 90, 51, 241))
        self.b4_button.setStyleSheet("background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"\n"
"\n"
"#b4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"\n"
"}")
        self.b4_button.setText("")
        self.b4_button.setObjectName("b4_button")
        self.a40_button = QtWidgets.QPushButton(self.tab_2)
        self.a40_button.setGeometry(QtCore.QRect(910, 90, 41, 161))
        self.a40_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.a40_button.setText("")
        self.a40_button.setObjectName("a40_button")
        self.d30_button = QtWidgets.QPushButton(self.tab_2)
        self.d30_button.setGeometry(QtCore.QRect(360, 90, 41, 161))
        self.d30_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.d30_button.setText("")
        self.d30_button.setObjectName("d30_button")
        self.f30_button = QtWidgets.QPushButton(self.tab_2)
        self.f30_button.setGeometry(QtCore.QRect(460, 90, 41, 161))
        self.f30_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.f30_button.setText("")
        self.f30_button.setObjectName("f30_button")
        self.g30_button = QtWidgets.QPushButton(self.tab_2)
        self.g30_button.setGeometry(QtCore.QRect(510, 90, 41, 161))
        self.g30_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"

"")
        self.g30_button.setText("")
        self.g30_button.setObjectName("g30_button")
        self.a30_button = QtWidgets.QPushButton(self.tab_2)
        self.a30_button.setGeometry(QtCore.QRect(560, 90, 41, 161))
        self.a30_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.a30_button.setText("")
        self.a30_button.setObjectName("a30_button")
        self.c40_button = QtWidgets.QPushButton(self.tab_2)
        self.c40_button.setGeometry(QtCore.QRect(660, 90, 41, 161))
        self.c40_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.c40_button.setText("")
        self.c40_button.setObjectName("c40_button")
        self.d40_button = QtWidgets.QPushButton(self.tab_2)
        self.d40_button.setGeometry(QtCore.QRect(710, 90, 41, 161))
        self.d40_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.d40_button.setText("")
        self.d40_button.setObjectName("d40_button")
        self.f40_button = QtWidgets.QPushButton(self.tab_2)
        self.f40_button.setGeometry(QtCore.QRect(810, 90, 41, 161))
        self.f40_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.f40_button.setText("")
        self.f40_button.setObjectName("f40_button")
        self.g40_button = QtWidgets.QPushButton(self.tab_2)
        self.g40_button.setGeometry(QtCore.QRect(860, 90, 41, 161))
        self.g40_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.g40_button.setText("")
        self.g40_button.setObjectName("g40_button")
        self.c30_button = QtWidgets.QPushButton(self.tab_2)
        self.c30_button.setGeometry(QtCore.QRect(310, 90, 41, 161))
        self.c30_button.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
"}\n"
"#g40:pressed{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
"\n"
"}\n"
"")
        self.c30_button.setText("")
        self.c30_button.setObjectName("c30_button")
        self.label_drums = QtWidgets.QLabel(self.tab_2)
        self.label_drums.setGeometry(QtCore.QRect(160, 400, 321, 191))
        self.label_drums.setText("")
        self.label_drums.setPixmap(QtGui.QPixmap("drums.png"))
        self.label_drums.setObjectName("label_drums")
        self.snare_drum = QtWidgets.QPushButton(self.tab_2)
        self.snare_drum.setGeometry(QtCore.QRect(170, 510, 71, 71))
        self.snare_drum.setStyleSheet("border-radius:35px;\n"
"background-color: rgb(70, 70, 70);")
        self.snare_drum.setText("")
        self.snare_drum.setObjectName("snare_drum")
        self.label_gutar = QtWidgets.QLabel(self.tab_2)
        self.label_gutar.setGeometry(QtCore.QRect(730, 400, 501, 211))
        self.label_gutar.setText("")
        self.label_gutar.setPixmap(QtGui.QPixmap("gutar.jpg"))
        self.label_gutar.setObjectName("label_gutar")
        self.gutar_a_button = QtWidgets.QPushButton(self.tab_2)
        self.gutar_a_button.setGeometry(QtCore.QRect(870, 489, 15, 15))
        self.gutar_a_button.setAutoFillBackground(False)
        self.gutar_a_button.setStyleSheet("background-color: rgb(218, 175, 106);\n"
"")
        self.gutar_a_button.setText("")
        self.gutar_a_button.setObjectName("gutar_a_button")
        self.gutar_d_button = QtWidgets.QPushButton(self.tab_2)
        self.gutar_d_button.setGeometry(QtCore.QRect(890, 493, 15, 15))
        self.gutar_d_button.setAutoFillBackground(False)
        self.gutar_d_button.setStyleSheet("background-color: rgb(218, 175, 106);\n"
"")
        self.gutar_d_button.setText("")
        self.gutar_d_button.setObjectName("gutar_d_button")
        self.gutar_g_button = QtWidgets.QPushButton(self.tab_2)
        self.gutar_g_button.setGeometry(QtCore.QRect(910, 497, 15, 15))
        self.gutar_g_button.setAutoFillBackground(False)
        self.gutar_g_button.setStyleSheet("background-color: rgb(218, 175, 106);\n"
"")
        self.gutar_g_button.setText("")
        self.gutar_g_button.setObjectName("gutar_g_button")
        self.gutat_E1_button = QtWidgets.QPushButton(self.tab_2)
        self.gutat_E1_button.setGeometry(QtCore.QRect(850, 485, 15, 15))
        self.gutat_E1_button.setAutoFillBackground(False)
        self.gutat_E1_button.setStyleSheet("background-color: rgb(218, 175, 106);\n"
"")
        self.gutat_E1_button.setText("")
        self.gutat_E1_button.setObjectName("gutat_E1_button")
        self.gutar_e2_button = QtWidgets.QPushButton(self.tab_2)
        self.gutar_e2_button.setGeometry(QtCore.QRect(950, 506, 15, 15))
        self.gutar_e2_button.setAutoFillBackground(False)
        self.gutar_e2_button.setStyleSheet("background-color: rgb(218, 175, 106);\n"
"")
        self.gutar_e2_button.setText("")
        self.gutar_e2_button.setObjectName("gutar_e2_button")
        self.gutar_b_button = QtWidgets.QPushButton(self.tab_2)
        self.gutar_b_button.setGeometry(QtCore.QRect(930, 502, 15, 15))
        self.gutar_b_button.setAutoFillBackground(False)
        self.gutar_b_button.setStyleSheet("background-color: rgb(218, 175, 106);\n"
"")
        self.gutar_b_button.setText("")
        self.gutar_b_button.setObjectName("gutar_b_button")
        self.hi_hat_button = QtWidgets.QPushButton(self.tab_2)
        self.hi_hat_button.setGeometry(QtCore.QRect(277, 525, 51, 41))
        self.hi_hat_button.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(70, 70, 70);")
        self.hi_hat_button.setText("")
        self.hi_hat_button.setObjectName("hi_hat_button")
        self.mudim_tom_button = QtWidgets.QPushButton(self.tab_2)
        self.mudim_tom_button.setGeometry(QtCore.QRect(370, 410, 51, 51))
        self.mudim_tom_button.setStyleSheet("border-radius:25px;\n"
"background-color: rgb(70, 70, 70);")
        self.mudim_tom_button.setText("")
        self.mudim_tom_button.setObjectName("mudim_tom_button")
        self.floor_tom = QtWidgets.QPushButton(self.tab_2)
        self.floor_tom.setGeometry(QtCore.QRect(360, 517, 71, 61))
        self.floor_tom.setStyleSheet("border-radius:30px;\n"
"background-color: rgb(70, 70, 70);")
        self.floor_tom.setText("")
        self.floor_tom.setObjectName("floor_tom")
        self.small_tom = QtWidgets.QPushButton(self.tab_2)
        self.small_tom.setGeometry(QtCore.QRect(180, 410, 51, 51))
        self.small_tom.setStyleSheet("border-radius:25px;\n"
"background-color: rgb(70, 70, 70);")
        self.small_tom.setText("")
        self.small_tom.setObjectName("small_tom")
        self.crash_button = QtWidgets.QPushButton(self.tab_2)
        self.crash_button.setGeometry(QtCore.QRect(230, 460, 61, 61))
        self.crash_button.setStyleSheet("border-radius:30px;\n"
"background-color: rgb(70, 70, 70);")
        self.crash_button.setText("")
        self.crash_button.setObjectName("crash_button")
        self.ride_button = QtWidgets.QPushButton(self.tab_2)
        self.ride_button.setGeometry(QtCore.QRect(310, 460, 61, 61))
        self.ride_button.setStyleSheet("border-radius:30px;\n"
"background-color: rgb(70, 70, 70);")
        self.ride_button.setText("")
        self.ride_button.setObjectName("ride_button")
        self.label_gutar_icon = QtWidgets.QLabel(self.tab_2)
        self.label_gutar_icon.setGeometry(QtCore.QRect(550, 20, 61, 31))
        self.label_gutar_icon.setText("")
        self.label_gutar_icon.setPixmap(QtGui.QPixmap("gutaricon.png"))
        self.label_gutar_icon.setObjectName("label_gutar_icon")
        self.label_biano_icon = QtWidgets.QLabel(self.tab_2)
        self.label_biano_icon.setGeometry(QtCore.QRect(640, 20, 61, 31))
        self.label_biano_icon.setText("")
        self.label_biano_icon.setPixmap(QtGui.QPixmap("bianoicon.png"))
        self.label_biano_icon.setObjectName("label_bisno_icon")
        self.label_drum_icon = QtWidgets.QLabel(self.tab_2)
        self.label_drum_icon.setGeometry(QtCore.QRect(720, 20, 51, 31))
        self.label_drum_icon.setText("")
        self.label_drum_icon.setPixmap(QtGui.QPixmap("drumicon.png"))
        self.label_drum_icon.setObjectName("label_drum_icon")
        self.tabWidget.addTab(self.tab_2, "")
        self.gridLayout_tabs.addWidget(self.tabWidget, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 943, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.menuFile.addAction(self.actionOpen)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.Open_Button.clicked.connect(lambda: self.load())
        self.Volume_slider.valueChanged.connect(lambda:self.Set_Volume())
        self.play_Button.clicked.connect(lambda: self.playMusic())
        # These are the drums keys
        self.hi_hat_button.clicked.connect(lambda: self.play_drums(150))
        self.mudim_tom_button.clicked.connect(lambda: self.play_drums(128))
        self.floor_tom.clicked.connect(lambda: self.play_drums(65))
        self.small_tom.clicked.connect(lambda: self.play_drums(87))
        self.crash_button.clicked.connect(lambda: self.play_drums(114))
        self.ride_button.clicked.connect(lambda: self.play_drums(173))
        self.snare_drum.clicked.connect(lambda: self.play_drums(218))
        # These are the guitar keys
        self.gutat_E1_button.clicked.connect(lambda: self.play(87))
        self.gutar_a_button.clicked.connect(lambda: self.play(123))
        self.gutar_b_button.clicked.connect(lambda: self.play(147))
        self.gutar_g_button.clicked.connect(lambda: self.play(196))
        self.gutar_d_button.clicked.connect(lambda: self.play(247))
        self.gutar_e2_button.clicked.connect(lambda: self.play(330))

        #######################
        self.a40_button.clicked.connect(lambda: self.sound(207.65))
        self.g40_button.clicked.connect(lambda: self.sound(233.08))
        self.f40_button.clicked.connect(lambda: self.sound(277.18))
        self.d40_button.clicked.connect(lambda: self.sound(311.13))
        self.c40_button.clicked.connect(lambda: self.sound(369.99))
        self.a30_button.clicked.connect(lambda: self.sound(415.30))
        self.g30_button.clicked.connect(lambda: self.sound(466.16))
        self.f30_button.clicked.connect(lambda: self.sound(554.37))
        self.d30_button.clicked.connect(lambda: self.sound(622.58))
        self.c30_button.clicked.connect(lambda: self.sound(700.79))

        self.c5_button.clicked.connect(lambda: self.sound(220))
        self.b4_button.clicked.connect(lambda: self.sound(246.94))
        self.a4_button.clicked.connect(lambda: self.sound(261.63))
        self.g4_button.clicked.connect(lambda: self.sound(293.66))
        self.f4_button.clicked.connect(lambda: self.sound(329.63))
        self.e4_button.clicked.connect(lambda: self.sound(349.23))
        self.d4_button.clicked.connect(lambda: self.sound(392))
        self.c4_button.clicked.connect(lambda: self.sound(440))
        self.b3_button.clicked.connect(lambda: self.sound(493.88))
        self.a3_button.clicked.connect(lambda: self.sound(523.25))
        self.g3_button.clicked.connect(lambda: self.sound(572.62))
        self.f3_button.clicked.connect(lambda: self.sound(602.87))
        self.e3_button.clicked.connect(lambda: self.sound(643.37))
        self.d3_button.clicked.connect(lambda: self.sound(673.26))
        self.c3_button.clicked.connect(lambda: self.sound(723.49))

        ##Piano
        # get tsteps for each sample, T is note duration in seconds
        self.fs_piano = 44100

        self.seconds = 0.5

        self.slider_arr = [self.DrumsSlider, self.ViolinSlider, self.FluteSlider,
                           self.PianoSlider, self.XylophoneSlider]
        for i in range(len(self.slider_arr)):
            self.connect_sliders(i)

        self.timer = QtCore.QTimer()




    song_data = []
    vol = 1
    gains = np.array([1.0, 1.0, 1.0, 1.0, 1.0])  # to store the gain of each slider
    levels_min_band = [0, 500, 2000, 1000, 5000]
    levels_max_band = [500, 1000, 5000, 2000, 10000]
    isPaused = False
    step = 0
    step_right = 0

    def connect_sliders(self, slider_index):
        self.slider_arr[slider_index].sliderReleased.connect(lambda: self.slidervalue(slider_index))

    def slidervalue(self, slider_index):
        self.value = self.slider_arr[slider_index].value()
        self.modify_signal(slider_index, self.value)


    def Reset_slider_gain(self):
        for i in range(len(self.slider_arr)):
            self.slider_arr[i].setValue(1)
            self.gains[i] = 1.0

    def load(self):
        self.graphicsView_maingraph.clear()
        self.Reset_slider_gain()
        options = QtWidgets.QFileDialog.Options()
        self.filename,self.format = QtWidgets.QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "",
                                                      "(*.wav) ", options=options)


        if self.filename == "":
            pass
        else:

            self.samplerate, self.song_data = wavfile.read(self.filename)

            # self.song_data = [i for i in self.song_data if i != 0]
            self.duration = len(self.song_data) / self.samplerate
            self.time = np.arange(0, self.duration, 1 / self.samplerate)  # time vector
            self.zeros = np.zeros(self.song_data.size)  # when volume equal zero play an array of zeros
            self.convert_to_fft()
            self.Normalize_and_setVolume()
            self.graphicsView_maingraph.plot(self.time, self.song_data)
            self.start()
            self.step = 0
            self.playMusic()
    def convert_to_fft(self):
        self.original_signal_fft = np.fft.rfft(self.song_data)
        self.modified_fft = np.copy(self.original_signal_fft)  # this is the copy to operate on and update
        self.fft_fre = np.fft.rfftfreq(n=len(self.song_data),
                                       d=1 / self.samplerate)  # gets the sample frequency bins per cycle
        self.freq_bins = int(len(self.song_data) * 0.5)  # to stop the mirroring
        self.Spectrogram(self.original_signal_fft)

    def convert_ifft(self, frequency_controld_sig):

        self.song_data = np.fft.irfft(frequency_controld_sig)
        # self.song_data = self.song_data.real
        self.graphicsView_maingraph.clear()
        self.song_data = np.ascontiguousarray(self.song_data, dtype=np.int32)  # need to convert to numpy array
        self.Normalize_and_setVolume()
        self.checkPlaying()
        self.update_starter_point_and_plot(self.bol_play)
        self.graphicsView_maingraph.plot(self.time, self.song_data)
    def checkPlaying(self):
        self.bol_play = True
        self.check_play_pause()
    def Spectrogram(self, frequency_controled_signal):
        self.spectro_fig.clear()
        plt = self.spectro_fig.gca()
        plt.cla()
        # negative freq is the cuz of mathimatical results, complex component that is rotation
        plt.specgram(frequency_controled_signal, Fs=self.samplerate, cmap="plasma")
        #spec_power = np.abs(frequency_controled_signal) / frequency_controled_signal.max()  # normalized spectral power
        #self.graphicsView_maingraph.plot(self.fft_fre, spec_power)  # reads the first half only to avoid mirroring
        self.figure_canvas_genSig.draw()
        self.figure_canvas_genSig.flush_events()
    def frequency_control(self, min_freq, max_freq, level, gain):

        self.modified_fft[(self.fft_fre >= min_freq) & (self.fft_fre <= max_freq)] = \
            self.modified_fft[(self.fft_fre >= min_freq) & (self.fft_fre <= max_freq)] / self.gains[level]
        self.gains[level] = gain
        self.modified_fft[(self.fft_fre >= min_freq) & (self.fft_fre <= max_freq)] = \
            self.modified_fft[(self.fft_fre >= min_freq) & (self.fft_fre <= max_freq)] * self.gains[level]

        self.Spectrogram(self.modified_fft)
        self.convert_ifft(self.modified_fft)


    def check_play_pause(self):
        if self.play_Button.text() == "PLAY":
            self.bol_play = False

    def modify_signal(self, level_idx, gain):
        gain += 0.00001
        self.frequency_control(self.levels_min_band[level_idx], self.levels_max_band[level_idx], level=level_idx, gain=gain)


    def start(self):
        if self.step_right == 0:
            self.timer.timeout.connect(self.update_plot_data)
        self.isPaused = False
        self.timer.start(250)

    def update_plot_data(self):
        if not self.isPaused:
            self.step_right = self.step + 2
            self.step += 0.1
            self.graphicsView_maingraph.plotItem.setXRange(self.step, self.step_right)
            if int(self.step) == int(self.time[-1]):
                self.timer.stop()

    def update_starter_point_and_plot(self, bol_check):
        if bol_check == False:
            self.bol_play = False
        self.x_mid = (self.step + self.step_right) / 2
        self.starter_point = (self.x_mid / self.duration) * len(self.song_data)
        if (self.bol_play):
            sd.play(self.song_data[int(self.starter_point):], self.samplerate)

    def playMusic(self):

        self.update_starter_point_and_plot(False)
        if self.play_Button.text() == "PLAY":
            self.start()
            self.Normalize_and_setVolume()
            sd.play(self.song_data[int(self.starter_point):], self.samplerate)
            self.play_Button.setText("STOP")
        else:
            self.isPaused = True
            sd.stop()  # should be the pause i think
            self.play_Button.setText("PLAY")
    def Set_Volume(self):
        self.bol_play = True
        self.vol = self.Volume_slider.value() / 100
        if self.vol == 0:
            sd.play(self.zeros, self.samplerate)
        else:
            #logging.info('Volume level is {}'.format(self.Volume_slider.getvalue()))
            self.Normalize_and_setVolume()
            self.check_play_pause()
            self.update_starter_point_and_plot(self.bol_play)
            # sd.play(self.song_data[int(self.starter_point):], self.samplerate)

    def Normalize_and_setVolume(self):
        data_norm = self.song_data / self.song_data.max()
        self.song_data = self.vol * data_norm


    def karplus_strong(self, wavetable, n_samples):
        """Synthesizes a new waveform from an existing wavetable, modifies last sample by averaging."""
        samples = []
        current_sample = 0
        previous_value = 0
        while len(samples) < n_samples:
            wavetable[current_sample] = 0.5 * (wavetable[current_sample] + previous_value)
            samples.append(wavetable[current_sample])
            previous_value = samples[-1]
            current_sample += 1
            current_sample = current_sample % wavetable.size
        return np.array(samples)

    def play(self, g_freq):
        self.fs = 30000
        self.wavetable_size = self.fs // g_freq
        self.wavetable = (2 * np.random.randint(0, 2, self.wavetable_size) - 1).astype(np.float)
        sample = self.karplus_strong(self.wavetable, 2 * self.fs)
        sd.play(sample, self.fs)
        #######################################################################
        ############### DRUMS ######################

    def karplus_strong_drum(self, wavetable_drums, n_samples, prob):
        """Synthesizes a new waveform from an existing wavetable, modifies last sample by averaging."""
        samples_drums = []
        current_sample_drums = 0
        previous_value_drums = 0
        while len(samples_drums) < n_samples:
            r = np.random.binomial(1, prob)
            sign = float(r == 1) * 2 - 1
            wavetable_drums[current_sample_drums] = sign * 0.5 * (
                    wavetable_drums[current_sample_drums] + previous_value_drums)
            samples_drums.append(wavetable_drums[current_sample_drums])
            previous_value_drums = samples_drums[-1]
            current_sample_drums += 1
            current_sample_drums = current_sample_drums % wavetable_drums.size
        return np.array(samples_drums)

    def play_drums(self, freq_drums):
        self.fs_drums =44100
        wavetable_size_drums = self.fs_drums // freq_drums
        wavetable_drums = np.ones(wavetable_size_drums)
        sample_drums = self.karplus_strong_drum(wavetable_drums, self.fs_drums, 0.5)
        sd.play(sample_drums, self.fs_drums)
        ##############################################################

    def sound(self, freq):
        # Generate array with seconds*sample_rate steps, ranging between 0 and seconds
        time = np.linspace(0, self.seconds, int(self.seconds * self.fs_piano), False)
        # Generate a 440 Hz sine wave
        note = np.sin(np.sin(freq * time * 2 * np.pi) * 1 / 220)
        # Ensure that highest value is in 16-bit range
        audio = note * (2 ** 15 - 1) / np.max(np.abs(note))
        # Convert to 16-bit data
        audio = audio.astype(np.int16)
        # Start playback
        play_obj = sa.play_buffer(audio, 1, 2, self.fs_piano)
        # Wait for playback to finish before exiting
        play_obj.wait_done()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Music Equlizer"))
        self.label.setText(_translate("MainWindow", "Music Equlizer"))
        self.Open_Button.setText(_translate("MainWindow", "Open"))
        self.labelvolume.setText(_translate("MainWindow", "    volume"))
        self.play_Button.setText(_translate("MainWindow", "PLAY"))
        self.label_spectro.setText(_translate("MainWindow", "Spectrogram"))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.EQ), _translate("MainWindow", "EQ"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Instruments"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))

if __name__ == "__main__":
  import sys
  app = QtWidgets.QApplication(sys.argv)
  MainWindow = QtWidgets.QMainWindow()
  ui = Ui_MainWindow()
  ui.setupUi(MainWindow)
  MainWindow.show()
  sys.exit(app.exec_())
